/**
* Tucuxi TDM server
* This is the Tucuxi TDM server.
*
* OpenAPI spec version: 1.0.0
* Contact: nadir.benallal@heig-vd.ch
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/

#include "ComputationApiImpl.h"

namespace Tucuxi {
namespace Server {
namespace API {

using namespace std;

ComputationApiImpl::ComputationApiImpl(std::shared_ptr<Pistache::Http::Endpoint> _pEndpoint, std::shared_ptr<Pistache::Rest::Router> _pRouter)
    : ComputationApi(_pEndpoint, _pRouter)
    { }

void ComputationApiImpl::compute_requests(const Query& _query, Pistache::Http::ResponseWriter& _response) {

    std::string requestType = _query.getRequests()
                                    .at(0)
                                    ->getRequestType();
    unique_ptr<Computer> computer;
    unique_ptr<ApiResponseWriter> apiResponseWriter;

    if (requestType == "prediction") {
        computer = make_unique<PredictionComputer>(_query);
    } else if (requestType == "dosageAdaptation") {
        computer = make_unique<AdjustmentComputer>(_query);
        apiResponseWriter = make_unique<ApiResponseAdjustmentWriter>();
    } else if (requestType == "firstDosage") {
        computer = make_unique<FirstDosageComputer>(_query);
    } else {
        _response.send(Pistache::Http::Code::Bad_Request, "Invalid request type (" + requestType + ")");
        return;
    }

    /*
    Tucuxi::Core::ComputationResult computationResult = computer->compute();
    if (computationResult != Tucuxi::Core::ComputationResult::Success) {
        string error = "Failure within the computation of the request!";
        _response.send(Pistache::Http::Code::Internal_Server_Error, error);
    } else {
        _response.send(Pistache::Http::Code::Ok, computer->getResult());
    }
    */
    computer->compute();
    ApiResponse& apiResponse = computer->getResult();
    apiResponseWriter->addApiResponse(apiResponse);
    string xmlApiResponse = apiResponseWriter->serialize();

    //_response.send(Pistache::Http::Code::Ok, computer->getResult().getQueryID());
    _response.send(Pistache::Http::Code::Ok, xmlApiResponse);
}

} // namespace API
} // namespace Server
} // namespace Tucuxi
