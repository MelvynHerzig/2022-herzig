/**
* Hello World C++ Pistache server
* This is a Hello World server.
*
* OpenAPI spec version: 1.0.0
* Contact: nadir.benallal@heig-vd.ch
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/

#include "HelloApi.h"
#include "DrugsApi.h"

namespace Tucuxi {
namespace Server {
namespace API {

HelloApi::HelloApi(std::shared_ptr<Pistache::Http::Endpoint> _pEndpoint, std::shared_ptr<Pistache::Rest::Router> _pRouter)
    : m_httpEndpoint(_pEndpoint), m_router(_pRouter)
{ };

void HelloApi::setupRoutes() {
    using namespace Pistache::Rest;

    Routes::Get(*m_router, base + "/hello", Routes::bind(&HelloApi::hello_world_handler, this));
    Routes::Post(*m_router, base + "/hello", Routes::bind(&HelloApi::test_query_handler, this));

    // Default handler, called when a route is not found
    m_router->addCustomHandler(Routes::bind(&HelloApi::hello_api_default_handler, this));
}

void HelloApi::hello_world_handler(const Pistache::Rest::Request& _request, Pistache::Http::ResponseWriter _response) {
    UNUSED(_request);
    try {
      this->hello_world(_response);
    } catch (std::runtime_error&  e) {
      //send a 400 error
      _response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}

void HelloApi::test_query_handler(const Pistache::Rest::Request& _request, Pistache::Http::ResponseWriter _response) {

    try {
        XMLReader xmlReader(_request.body());
        this->test_query(xmlReader.getQuery(), _response);
    } catch (std::runtime_error&  e) {
        //send a 400 error
        _response.send(Pistache::Http::Code::Bad_Request, e.what());
        return;
    } catch (const rapidxml::parse_error& e) {
        //send a 400 error
        _response.send(Pistache::Http::Code::Bad_Request, e.what());
        return;
    }

}

void HelloApi::hello_api_default_handler(const Pistache::Rest::Request& _request, Pistache::Http::ResponseWriter _response) {
    UNUSED(_request);
    _response.send(Pistache::Http::Code::Not_Found, "The requested method does not exist.");
}

} // namespace API
} // namespace Server
} // namespace Tucuxi

