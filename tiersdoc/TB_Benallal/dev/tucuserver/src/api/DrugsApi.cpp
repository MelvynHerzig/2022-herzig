/**
* Tucuxi TDM server
* This is the Tucuxi TDM server.
*
* OpenAPI spec version: 1.0.0
* Contact: nadir.benallal@heig-vd.ch
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/

#include "DrugsApi.h"

namespace Tucuxi {
namespace Server {
namespace API {

DrugsApi::DrugsApi(std::shared_ptr<Pistache::Http::Endpoint> _pEndpoint, std::shared_ptr<Pistache::Rest::Router> _pRouter)
    : m_httpEndpoint(_pEndpoint), m_router(_pRouter)
{ };

void DrugsApi::setupRoutes() {
    using namespace Pistache::Rest;

    Routes::Get(*m_router, base + "/drugs", Routes::bind(&DrugsApi::list_drugs_handler, this));
    Routes::Post(*m_router, base + "/drugs", Routes::bind(&DrugsApi::add_drug_handler, this));
    Routes::Delete(*m_router, base + "/drugs/:drugID", Routes::bind(&DrugsApi::delete_drug_handler, this));
    Routes::Put(*m_router, base + "/drugs/:drugID", Routes::bind(&DrugsApi::edit_drug_handler, this));
    Routes::Get(*m_router, base + "/drugs/:drugID", Routes::bind(&DrugsApi::get_drug_handler, this));
}

void DrugsApi::add_drug_handler(const Pistache::Rest::Request& _request, Pistache::Http::ResponseWriter _response) {

    try {
        // TODO change the reader to a drug file reader
        XMLReader xmlReader(_request.body());
        this->add_drug(xmlReader.getQuery(), _response);
    } catch (std::runtime_error&  e) {
      //send a 400 error
      _response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void DrugsApi::delete_drug_handler(const Pistache::Rest::Request& _request, Pistache::Http::ResponseWriter _response) {
    // Getting the path params
    std::string drugID = _request.param(":drugID").as<std::string>();
    
    try {
      this->delete_drug(drugID, _response);
    } catch (std::runtime_error&  e) {
      //send a 400 error
      _response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void DrugsApi::edit_drug_handler(const Pistache::Rest::Request& _request, Pistache::Http::ResponseWriter _response) {
    // Getting the path params
    std::string drugID = _request.param(":drugID").as<std::string>();
    
    try {
        XMLReader xmlReader(_request.body());
        this->edit_drug(drugID, xmlReader.getQuery(), _response);
    } catch (std::runtime_error&  e) {
      //send a 400 error
      _response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void DrugsApi::get_drug_handler(const Pistache::Rest::Request& _request, Pistache::Http::ResponseWriter _response) {
    // Getting the path params
    std::string drugID = _request.param(":drugID").as<std::string>();
    
    try {
      this->get_drug(drugID, _response);
    } catch (std::runtime_error&  e) {
      //send a 400 error
      _response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void DrugsApi::list_drugs_handler(const Pistache::Rest::Request& _request, Pistache::Http::ResponseWriter _response) {

    UNUSED(_request);
    try {
      this->list_drugs(_response);
    } catch (std::runtime_error&  e) {
      //send a 400 error
      _response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}

void DrugsApi::drugs_api_default_handler(const Pistache::Rest::Request& _request, Pistache::Http::ResponseWriter _response) {
    UNUSED(_request);
    _response.send(Pistache::Http::Code::Not_Found, "The requested method does not exist (DrugsApi)");
}

} // namespace API
} // namespace Server
} // namespace Tucuxi

